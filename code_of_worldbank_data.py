# -*- coding: utf-8 -*-
"""Copy of worldbank_data.py

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1OxRI7A3kYHy0TvwgG26XHr97_jQO2tye

import library
"""

import pandas as pd 
from matplotlib import pyplot as plot_matplt
import numpy as np

"""creating function

"""

#creating  function 
def read_data(dataset):
    data1=pd.read_csv(dataset,skiprows=4)
    # read csv file and skip 4 rows
    data2=data1.drop(['Indicator Code', 'Country Code', 'Indicator Name', 'Unnamed: 66'],axis=1)
    # drop  columns 
    data3=data2.set_index("Country Name")
    # set index name 
    data4=data3.T
    # transpose dataset
    data4.reset_index(inplace=True)
    # reset index name 
    data4.rename(columns = {'index':'Year'}, inplace = True)
    # rename index name 
    return data1,data4 #

"""Read path"""

dataset=('/content/drive/MyDrive/worldbank_dataset.csv') # read dataset path
data_frame1,data_frame2=read_data(dataset) # reading data 
data_frame1.head()
 # showing dataset

"""Printing data frame 2"""

data_frame2.head()
 #printing dataset

"""Showing Correlation Rural population (% of total population)"""

data_corr = data_frame1[data_frame1['Indicator Name']=='Rural population (% of total population)']  

data_corr_1 = data_corr.pivot_table(index=['Country Name'], values = ['1985', '1995', '2015', '2021']) 
 
data_corr_1.head(10)

"""Plotting Bar Graph For Agricultural nitrous oxide emissions (% of total)"""

plot_matplt.rcParams.update({'font.size': 18}) # define fornt Size 
bar1= data_frame1[data_frame1['Indicator Name'] == 'Agricultural nitrous oxide emissions (% of total)']
bar2=bar1.pivot_table(index=['Country Name'], values=['1990', '1995', '2000', '2005']) 
# define figure size (20,7)
plot_matplt.rcParams['figure.figsize']=(20,7) 
bar3=bar2.head(22) # 
# set color name 
bar3.plot.bar(color=['Fuchsia', 'Blue', 'Chocolate',  'MediumSpringGreen', 'OrangeRed'])
plot_matplt.xlabel('Country')

plot_matplt.ylabel('Comparision')
# Set title Name 
plot_matplt.title('Agricultural nitrous oxide emissions (% of total)') 
# Showing graph 
plot_matplt.show();

"""Plotting Bar Graph For Forest area (% of land area)"""

# define figure size
bar4= data_frame1[data_frame1['Indicator Name'] =='Forest area (% of land area)']
bar5=bar4.pivot_table(index=['Country Name'], values=['1990', '1995', '2000', '2005']) 
plot_matplt.rcParams['figure.figsize']=(20,7) 
bar6= bar5.head(25)
bar6.plot.bar(color=['GoldenRod', 'Maroon', 'Fuchsia',  'Blue'])
plot_matplt.xlabel('Country Name')

plot_matplt.ylabel('Comparision')

plot_matplt.title('Forest area (% of land area)') 
# define title name 
plot_matplt.show();

"""Plotting Time Series Graph For Agriculture, forestry, and fishing, value added (% of GDP)"""

df_ts= data_frame1[data_frame1['Indicator Name']=='Agriculture, forestry, and fishing, value added (% of GDP)']  
df_ts1=df_ts.set_index("Country Name") 
df_ts2=df_ts1.drop([ 'Indicator Name', 'Indicator Code', 'Country Code', 'Unnamed: 66'],axis=1)
df_ts3=df_ts2.T
df_ts4 =df_ts3.reset_index()

df_ts5=df_ts4.pivot_table(index=['index'], values=['Cyprus', 'Czech Republic', 'Germany', 'Djibouti', 'Dominica', 'Denmark', 'Dominican Republic', 'Algeria', 'East Asia & Pacific (excluding high income)', 'Early-demographic dividend', 'East Asia & Pacific'])
plot_matplt.figure(figsize = (18,8)) # define figure size 
plot_matplt.plot(df_ts5.head(40),'--')
plot_matplt.xticks(rotation=90) 
plot_matplt.legend(['Cyprus', 'Czech Republic', 'Germany', 'Djibouti', 'Dominica', 'Denmark', 'Dominican Republic', 'Algeria', 'East Asia & Pacific (excluding high income)', 'Early-demographic dividend', 'East Asia & Pacific'],bbox_to_anchor =(1.0, 1.1), ncol = 1) 
plot_matplt.xlabel('Year')

plot_matplt.ylabel('Comparison ') 
 
plot_matplt.title('Agriculture, forestry, and fishing, value added (% of GDP)') 
# define title name 
plot_matplt.show() # showing graph

"""Plotting Time Series Graph For Agricultural methane emissions (thousand metric tons of CO2 equivalent)"""

df_ts6= data_frame1[data_frame1['Indicator Name']== 'Agricultural methane emissions (thousand metric tons of CO2 equivalent)']  
df_ts7=df_ts6.set_index("Country Name") 
df_ts8=df_ts7.drop(['Indicator Name', 'Indicator Code', 'Country Code', 'Unnamed: 66'],axis=1)
df_ts9=df_ts8.T
df_ts10 = df_ts9.reset_index()

df_ts11=df_ts10.pivot_table(index=['index'], values=['Cyprus', 'Czech Republic', 'Germany', 'Djibouti', 'Dominica', 'Denmark', 'Dominican Republic', 'Algeria', 'East Asia & Pacific (excluding high income)', 'Early-demographic dividend', 'East Asia & Pacific'])  
plot_matplt.figure(figsize = (18,8)) # define figure size 
plot_matplt.plot(df_ts11.head(40),'--')
plot_matplt.xticks(rotation=90) 
plot_matplt.legend(['Cyprus', 'Czech Republic', 'Germany', 'Djibouti', 'Dominica', 'Denmark', 'Dominican Republic', 'Algeria', 'East Asia & Pacific (excluding high income)', 'Early-demographic dividend', 'East Asia & Pacific'],bbox_to_anchor =(1.0, 1.1), ncol = 1) 
plot_matplt.xlabel('Year')

plot_matplt.ylabel('Comparison ') 

plot_matplt.title('Agricultural methane emissions (thousand metric tons of CO2 equivalent)') 

plot_matplt.show() # showing graph

"""Plotting Correlation Matrix For Country (Malaysia)"""

#creating function for country
def function(Country):
  matrix = data_frame1[data_frame1['Country Name']==f'{Country}'] 
  matrix = matrix.drop(['Country Name', 'Unnamed: 66', 'Country Code', 'Indicator Code'],axis=1) 
  matrix = matrix.T
  matrix1=matrix.iloc[0] 
  matrix=matrix[1:] 
  matrix.columns=matrix1
  matrix = matrix.reset_index(drop=True)
  return matrix

data_count=function('Malaysia') # fatch country name 
data_count.to_csv('Malaysia.csv') # create new data set file 
data_count1=pd.read_csv('/content/Malaysia.csv') # read dataset for Nepal country 
data1=data_count1.drop(['Unnamed: 0'],axis=1) # drop unnamed columns 
df_fill = data1.fillna(0)

df_matrix1 = df_fill[[ 'Agricultural machinery, tractors per 100 sq. km of arable land', 'Rural land area (sq. km)', 'Land area (sq. km)', 'Average precipitation in depth (mm per year)', 'Agricultural irrigated land (% of total agricultural land)', 'Forest area (% of land area)', 'Forest area (sq. km)']]

df_corr1=df_matrix1.corr() #correlation
df_corr1.head()

import numpy as np 
arr=df_corr1.to_numpy()
Labels=df_matrix1.columns
figure, Axis = plot_matplt.subplots(figsize=(15,10)) 
im = Axis.imshow(df_corr1,cmap="YlGnBu_r")

Axis.set_xticks(np.arange(len(Labels)))
Axis.set_yticks(np.arange(len(Labels)))

Axis.set_xticklabels(Labels)
Axis.set_yticklabels(Labels)

plot_matplt.setp(Axis.get_xticklabels(), rotation=120, ha="right",rotation_mode="anchor") 

for i in range(len(Labels)):
    for j in range(len(Labels)):
        text = Axis.text(j, i, round(arr[i, j],2), ha="center", va="center", color="black") 

Axis.set_title("Malaysia") 
plot_matplt.show()

"""Plotting Correlation Matrix For Country (Bangladesh)"""

data_count2=function('Bangladesh') 
data_count2.to_csv('Bangladesh.csv') # create new data set file 
data_count3=pd.read_csv('/content/Bangladesh.csv') # read dataset for Nepal country 
data1=data_count3.drop(['Unnamed: 0'],axis=1) # drop unnamed columns 
df_fill = data1.fillna(0)

df_matrix2= df_fill[[ 'Agricultural machinery, tractors per 100 sq. km of arable land', 'Rural land area (sq. km)', 'Land area (sq. km)', 'Average precipitation in depth (mm per year)', 'Agricultural irrigated land (% of total agricultural land)', 'Forest area (% of land area)', 'Forest area (sq. km)']]

df_corr2=df_matrix2.corr() 
df_corr2.head()

arr=df_corr2.to_numpy()
Labels=df_matrix2.columns
figure, Axis = plot_matplt.subplots(figsize=(15,10)) 
im = Axis.imshow(df_corr2,cmap="cividis")

Axis.set_xticks(np.arange(len(Labels)))
Axis.set_yticks(np.arange(len(Labels)))

Axis.set_xticklabels(Labels)
Axis.set_yticklabels(Labels)

plot_matplt.setp(Axis.get_xticklabels(), rotation=120, ha="right",rotation_mode="anchor") 

for i in range(len(Labels)):
    for j in range(len(Labels)):
        text = Axis.text(j, i, round(arr[i, j],2), ha="center", va="center", color="black") 

Axis.set_title("Bangladesh") 
plot_matplt.show()

